what is AWS?
- AWS (Amazon Web Services) is a cloud platform that provides on-demand computing, storage, networking, databases, AI/ML, security, and more. 
- Instead of owning and maintaining physical servers, businesses use AWS to scale and manage resources efficiently.

AWS offers a vast range of services for various use cases! 
While this project doesn’t require me to be familiar with all of them, the following are a few key services that helped me understand the types of solutions AWS provides 
and how they are billed.

1. AWS CodePipeline 
2. Elastic Load Balancing
3. RDS
4. Route 53
5. S3


1. AWS CodePipeline Explained Simply

Imagine we’re baking a cake. We have a step-by-step process:
	1.	Gather ingredients
	2.	Mix the batter
	3.	Bake in the oven
	4.	Decorate

Now, think of CodePipeline as our automated kitchen assistant that follows this process every single time we bake a cake. 
Instead of doing each step manually, CodePipeline ensures everything happens in the correct order without us having to watch over it.

- How Does CodePipeline Work?

	AWS CodePipeline is a continuous integration and continuous delivery (CI/CD) service that automates the process of building, 
	testing, and deploying software.

	Ok,Let’s break this down: How CodePipeline Works in Software Development

	Instead of baking a cake, let’s say we’re building a website or an app. Normally, the process involves:
	1.Writing code (like preparing ingredients)
	2.Building & testing it (like mixing and baking)
	3.Deploying the app to users (like serving the cake!)

	CodePipeline automates these steps, making sure:
	1. Every time a developer makes a change, the code is built and tested automatically.
	2. If everything looks good, the new version is deployed to AWS services like EC2, Lambda, or S3.
	3. If something goes wrong, it stops the process so bad code isn’t deployed.


- Why Use CodePipeline?
	a. No manual work – Everything happens automatically.
	b. Faster updates – New features and bug fixes reach users quickly.
	c. Fewer mistakes – Automated testing catches errors before deployment.
	d. Zero downtime – Works with tools like Elastic Beanstalk for smooth updates.

- Example: CodePipeline in Action!!
	Let’s say you run an online store. When your developer fixes a bug in the checkout page:
	1. They push the updated code to GitHub (or AWS CodeCommit).
	2. CodePipeline detects the change and triggers the process.
	3. The code is built and tested automatically.
	4. If tests pass, the new version is deployed to your website.
	5. Users see the updated checkout page instantly without issues.

- How is CodePipeline Charged?
	1. You pay per pipeline, meaning each automated workflow has a fixed cost.
	2. Extra charges may apply if the pipeline integrates with other AWS services.


- Explaining "One CodePipeline Process" (Step-by-Step)

	Let’s say you’re a developer working on a travel booking website. 
	You just fixed a bug where the payment button wasn’t working. 
	Instead of manually deploying the fix, AWS CodePipeline automates the process.
	Here’s what happens when you push your updated code:

	One CodePipeline Process (Step-by-Step)
		
		Step 1: Source Stage (Code Storage)
			- Where is your code stored? It could be:
				1. GitHub (popular for developers)
				2. AWS CodeCommit (AWS’s own Git repository)
				3. S3 (for files or applications)
			- What happens?
				1. CodePipeline detects that you pushed a new change (the bug fix).
				2. It automatically pulls the latest version of your code.

		
		Step 2: Build Stage (Compiling & Preparing)
			- Now, the raw code needs to be converted into a working application. This is done using:
				1. AWS CodeBuild (AWS’s tool for compiling code)
				2. Other build tools like Jenkins
			- What happens?
				1. CodeBuild compiles the code, turning it into a usable format.
				2. It runs automated tests to check for errors.
				3. If tests fail, the process stops and alerts you to fix the issue.

		
		Step 3: Deploy Stage (Launching the Update)
			Once the code is built and tested, it’s time to deploy it live!
			- Where does it get deployed?
				1. EC2 instances (virtual machines)
 				2. Lambda functions (serverless apps)
				3. S3 buckets (static websites or storage)
				4. Elastic Beanstalk (managed web applications)

			- What happens?
				1. The fixed version of your app replaces the old one.
				2. If using blue/green deployment, AWS makes sure there’s no downtime.
				3. Your customers now see the updated, bug-free booking page! 


		Step 4: Approval & Monitoring (Final Checks )
			- Sometimes, you want to manually review before deployment. CodePipeline allows:
				1. Manual approval before the update goes live.
				2. AWS CloudWatch monitoring to track if the update is working smoothly.


- P.S. If something goes wrong, we can roll back to the previous version easily!

Summary: So, what happens in a single Pipeline in Action - 
1. Source: CodePipeline detects new code from GitHub/CodeCommit.
2. Build: CodeBuild compiles and tests the code.
3. Deploy: The fixed version is deployed to AWS services.
4. Monitor: Approve, monitor, or roll back if needed.

Instead of doing this manually every time, CodePipeline automates everything, making deployments faster, safer, and hassle-free.
